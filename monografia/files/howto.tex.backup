\chapter{Novas Funcionalidades}

Dentre as várias características de um software bem projetado, pode-se ressaltar que uma das desejadas é permitir facilmente a inclusão de novas funcionalidades. Para isso elabora-se um bom design do mesmo, bem como uma boa documentação. Com esse intuito aqui será apresentado um pequeno guia que serve de auxílio para inclusão de novas funcionalidades, bem como para um melhor entendimento do sistema.

\subsection{Considerações Iniciais}

Inicialmente podemos destacar alguns esclarecimentos básicos a respeito da organização do código fonte:

\begin{enumerate}
 \item Em relação a interface gráfica, o módulo principal que organiza os dados de interface gráfica da calculadora, incluindo a disposição de botões, é o CalcGui. Além desse, existem módulos que lidam com a tabela de amortização (calcTableDialog), com a tabela de recall (recallViewDialog) e com a tabela de store (storeViewDialog). 

\item Existe um componente que representa um botão (calcButton). Para cada botão pode-se adicionar até 3 textos de funções: uma na parte superior, um na parte inferior e um na parte central.

\item O controller (calcController) captura todos os eventos de teclas pressionadas. A identificação das teclas se dá considerando o texto da parte central do botão 
(que representa a função principal de cada tecla). Em seguida o controller chama uma ação correspondente no model (calcModel).

\item O calcModel é a lógica de negócio do sistema. Esse módulo guarda o estado da calculadora (opções de arredondamento, se as teclas especiais f ou g estão pressionadas, etc) e conhece a pilha (calcStack), os demais registradores (calcRegs) e as funções da biblioteca financeira (pyFinancialLibrary).

\item O calcModel oferece publicamente funções que casam com as funções tidas como principais de cada botão (a funcão cujo texto fica no meio do botão). Dado que o calcModel conhece o estado da calculadora, em cada uma dessas chamadas verifica-se que função da biblioteca usar analisando, por exemplo, se o usuário selecionou os botões F ou G.

\item Na ligação do modelo, da interfaçe gráfica e do controlador foi utilizado o modelo MVC \cite {mvc}. Os módulos da interface gráfica atuam como \textit{Observers} da lógica de negócio e assim são ativados pela mesma quando necessários. O model tem vários listeners para eventos como: modificação do valor da tela, modificação da pilha, etc. A ativação de cada um desses listeners ocorre ao final de cada função do model, bem como a análise de outras ações necessárias como, por exemplo desativar a seleção de F ou G feita pelo usuário.
% ; avisar listeners sobre alterações na pilha, registradores financeiros, etc, 
% dependendo do que a função faça; alertar a interface sobre modificação na tela, no estado dos botões ou sobre 
% a necessidade de mostrar a tabela de amortização, de recall ou de store.

\item Os dados fornecidos de volta aos listeners estão sempre no tipo Decimal, que é o tipo trabalhado pela calculadora de modo a alcançar alta precisão. Cada módulo da GUI formata esses dados como queira, fazendo uso das funções de formatacão presentes no módulo calcFormatUtil.

\end{enumerate}

\subsection{Exemplo de adição de função}

Agora, como exemplo, irá se utilizar a implementação de uma nova forma de divisão em que ao invés de se dividir o 
registrador Y pelo X, irá se dividir X por Y. Através desse exemplo, pretende-se abordar todo o passo-a-passo para se 
implementar uma nova funcionalidade.

Primeiramente é preciso escolher um botão do teclado da GUI que esteja livre para receber a nova função. 
No método \begin{verbatim} __createKeyboardLayout \end{verbatim}
do módulo calcGui é feita a adição do botões na tela. Escolha uma posição e adicione o 
botão através de \begin{verbatim}self.__addGridButton(grid, "INV /", 1, 5)\end{verbatim}

Agora, criar a ação relativa ao botão no método \textbf{keyboardButtonClicked(self, text)}
do controller: 

\lstinputlisting[language=Python, label=else, caption={Teste no controller}]{else.py}
% \begin{verbatim}
% 	elif text == "INV /":
%  		self.__model.invDiv()
% \end{verbatim}

No model, criar o método chamado no controller. Nele, implementar a nova funcionalidade baseado nos valores de 
F e G, nos valores dos registradores e no estado da calculadora. Com o resultado da divisão em mãos, setar algum dos 
registradores conforme necessário. Desativar as teclas F e G, e conforme o que for modificado (tela, pilha, registradores 
financeiros, etc) avisar os devidos listeners sobre as alterações. Um ponto importante é também alterar o modo de 
entrada de dados da calculadora de acordo com a funcionalidade desejada. Existem basicamente três modos: 
Mode.SaveMode (que devolve o valor 0.0 a tela), Mode.OperationMode (devolve zero a tela, mas antes dá um enter na pilha) 
e Mode.EntryMode (que indica que números estão sendo entrados na tela).

\lstinputlisting[language=Python, label=funcao, caption={Definição de Função no Model}]{funcao.py}


% \begin{verbatim}
% 
%     def invDiv(self):
%         if self.__isGPushed or self.__isFPushed:
%             self.__fireException("Function not yet implemented.")
%             self.__deactiveFandG()
%         else:
%             # "inv /"
%             try:
%                 result = self.__calcStack.getXReg() / self.__calcStack.getYReg()
%                 self.__calcStack.rollCounterClockWise()
%                 self.__calcStack[0] = result
%                 self.__calcStack[3] = self.__calcStack[2]
%         
%                 self.mode = Mode.OperationMode
%                 self.base = None
%                 self.dotActived = False
%         
%                 self.__fireStackRegisters(self.getAllStackRegisters())
%                 self.__fireScreenChangedEvent()
%                  
%             except Exception, e:
%                 self.__fireException(e.message)
% \end{verbatim}
